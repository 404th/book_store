// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: book.proto

package book_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookSericeClient is the client API for BookSerice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookSericeClient interface {
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*IDTracker, error)
}

type bookSericeClient struct {
	cc grpc.ClientConnInterface
}

func NewBookSericeClient(cc grpc.ClientConnInterface) BookSericeClient {
	return &bookSericeClient{cc}
}

func (c *bookSericeClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*IDTracker, error) {
	out := new(IDTracker)
	err := c.cc.Invoke(ctx, "/book_service.BookSerice/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookSericeServer is the server API for BookSerice service.
// All implementations must embed UnimplementedBookSericeServer
// for forward compatibility
type BookSericeServer interface {
	CreateBook(context.Context, *CreateBookRequest) (*IDTracker, error)
	mustEmbedUnimplementedBookSericeServer()
}

// UnimplementedBookSericeServer must be embedded to have forward compatible implementations.
type UnimplementedBookSericeServer struct {
}

func (UnimplementedBookSericeServer) CreateBook(context.Context, *CreateBookRequest) (*IDTracker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookSericeServer) mustEmbedUnimplementedBookSericeServer() {}

// UnsafeBookSericeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookSericeServer will
// result in compilation errors.
type UnsafeBookSericeServer interface {
	mustEmbedUnimplementedBookSericeServer()
}

func RegisterBookSericeServer(s grpc.ServiceRegistrar, srv BookSericeServer) {
	s.RegisterService(&BookSerice_ServiceDesc, srv)
}

func _BookSerice_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookSericeServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_service.BookSerice/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookSericeServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookSerice_ServiceDesc is the grpc.ServiceDesc for BookSerice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookSerice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book_service.BookSerice",
	HandlerType: (*BookSericeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookSerice_CreateBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
